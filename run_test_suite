#!/bin/bash
# Note that we must use bash since we are gonna source files
# that have bashisms in them.

set -e

NAME=$(basename ${0})
TARGET_DISPLAY=:8


usage() {
    echo "Usage: $NAME [OPTION]... ISO [FEATURE]...
Tests the FEATUREs (all by default) of ISO. Note that this command must be run
from the Tails source directory.

Options:
  --capture=FILE     Captures the test session into FILE using VP8 encoding.
                     Requires ffmpeg and libvpx0.
  --view             Shows the test session in a windows. Requires x11vnc
                     and xtightvncviewer.
  --vnc-server-only  Starts a VNC server for the test session. Requires x11vnc.
"
}

error() {
    echo "${NAME}: error: ${*}" >&2
    usage
    exit 1
}

check_dependency() {
    if ! which "${1}" >/dev/null && ! dpkg -s "${1}" >/dev/null 2>&1; then
        error "'${1}' is missing, please install it and run again. Aborting..."
    fi
}

start_xvfb() {
    check_dependency Xvfb
    Xvfb $TARGET_DISPLAY -screen 0 1024x768x24+32 >/dev/null 2>&1 &
    XVFB_PID=$!
    trap "kill -9 ${XVFB_PID}" EXIT
}

start_vnc_server() {
    check_dependency x11vnc
    VNC_SERVER_PORT="$(x11vnc -listen localhost -display ${TARGET_DISPLAY} \
                              -bg -nopw 2>&1 | \
                                  grep -m 1 "^PORT=[0-9]\+" | sed 's/^PORT=//')"
    echo "VNC server running on: localhost:${VNC_SERVER_PORT}"
}

start_vnc_viewer() {
    check_dependency xtightvncviewer
    DISPLAY=":0" xtightvncviewer -viewonly localhost:${VNC_SERVER_PORT} 1>/dev/null 2>&1 &
}

capture_session() {
    check_dependency ffmpeg
    check_dependency libvpx0
    echo "Capturing guest display into ${CAPTURE_FILE}"
    ffmpeg -f x11grab -s 1024x768 -r 15 -i ${TARGET_DISPLAY}.0 -an \
        -vcodec libvpx -y "${CAPTURE_FILE}" >/dev/null 2>&1 &
}

# main script

unset CAPTURE_FILE VNC_VIEWER VNC_SERVER
SHORTOPTS="a:c"
LONGOPTS="view,vnc-server-only,capture:,help"
OPTS=$(getopt -o $SHORTOPTS --longoptions $LONGOPTS -n "${NAME}" -- "$@")
eval set -- "$OPTS"
while [ $# -gt 0 ]; do
    case $1 in
        --view)
            VNC_VIEWER=yes
            VNC_SERVER=yes
            ;;
        --vnc-server-only)
            VNC_VIEWER=
            VNC_SERVER=yes
            ;;
        --capture)
            shift
            CAPTURE_FILE="$1"
            ;;
        --help)
	    usage
            exit 0
            ;;
        --)
            shift
            if [ -n "$1" ]; then
                ISO="$(readlink -f $1)"
            fi
            shift
            break
            ;;
    esac
    shift
done

if [ -z "${ISO}" ]; then
    error "No ISO provided. Aborting..."
fi

start_xvfb

if [ -n "${CAPTURE_FILE}" ]; then
    capture_session
fi
if [ -n "${VNC_SERVER}" ]; then
    start_vnc_server
fi
if [ -n "${VNC_VIEWER}" ]; then
    start_vnc_viewer
fi

# Workaround: when dumping the guest's memory via core_dump(), libvirt
# will create files that only root can read. We therefore pre-create
# them with more permissible permissions, which libvirt will preserve
# (although it will change ownership). so that the user running the
# script can grep the dumps for the fillram pattern.
for file in features/tmpfs/after_wipe.dump features/tmpfs/before_wipe.dump; do
    if [ ! -e "${file}" ]; then
        touch "${file}"
    fi
    if [ -O "${file}" ]; then
        chmod a+r "${file}"
    fi
done

export SIKULI_HOME="/usr/share/java"
export DISPLAY=${TARGET_DISPLAY}
export ISO="${ISO}"
. features/.rvmrc
check_dependency cucumber
if [ -z "${*}" ]; then
    cucumber features/cucumber/
else
    cucumber features/cucumber/step_definitions features/cucumber/support ${*}
fi
